// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Applicant {
  id        Int      @id @default(autoincrement())
  fullName  String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)

  applications            Application[]
  applicantFavorites      ApplicantFavorite[]
  applicantSkill          ApplicantSkill[]
  applicantInfo           ApplicantInfo?
  applicantEducation      ApplicantEducation[]
  applicantExperience     ApplicantExperience[]
  applicantQualifications ApplicantQualifications[]
  applicantProject        ApplicantProject[]
  jobInterest             JobInterest[]
  jobViewLog              JobViewLog[]
  jobFavorite             JobFavorite[]
}

model Company {
  id                 Int      @id @default(autoincrement())
  companyName        String
  ceoName            String?
  hrName             String?
  registrationNumber String   @unique
  email              String   @unique
  password           String
  isActive           Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  job                  Job[]
  companyInfo          CompanyInfo?
  companyCertification CompanyCertification[]
  companyStatistics    CompanyStatistics?
  applicantFavorite    ApplicantFavorite[]
  jobSkill             JobSkill[]
}

model Job {
  id                         Int             @id @default(autoincrement())
  companyId                  Int
  title                      String
  position                   String
  skills                     Json?
  startDate                  DateTime?
  endDate                    DateTime?
  numberOfVacancies          Int             @default(1)
  experienceLevel            ExperienceLevel @default(Unspecified)
  experienceYears            String?
  jobType                    JobType         @default(Regular)
  contractPeriod             String?
  salary                     String?
  location                   String          @default("대한민국")
  companyIntroduction        String?
  preferentialTreatment      String?
  welfareBenefits            String?
  notice                     String?
  note                       String?
  hiringProcess              String?
  personalStatementQuestions String?
  requiredDocuments          String?
  status                     JobStatus       @default(Incomplete)
  viewCount                  Int             @default(0)
  applicationCount           Int             @default(0)
  createdAt                  DateTime        @default(now())
  updatedAt                  DateTime        @updatedAt

  applications    Application[]
  jobFavorites    JobFavorite[]
  company         Company           @relation(fields: [companyId], references: [id])
  jobTopicDetails JobTopicDetails[]
  jobSkill        JobSkill[]
  jobInterest     JobInterest[]
  jobViewLog      JobViewLog[]

  @@unique([id, companyId])
}

enum ExperienceLevel {
  Newcomer
  Experienced
  Unspecified
}

enum JobType {
  Regular
  Contract
  Intern
}

enum JobStatus {
  Ongoing
  Reviewing
  Waiting
  Closed
  Incomplete
}

model JobTopicDetails {
  jobId                     Int
  companyId                 Int
  topic                     String
  detail                    String?
  itemOrder                 Int
  responsibilities          String?
  qualificationRequirements String?

  job Job @relation(fields: [jobId, companyId], references: [id, companyId])

  @@id([jobId, companyId, topic, itemOrder])
}

model Skill {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  itemOrder Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  jobSkill       JobSkill[]
  applicantSkill ApplicantSkill[]
}

model JobSkill {
  jobId     Int
  companyId Int
  skillId   Int
  itemOrder Int

  job     Job     @relation(fields: [jobId], references: [id])
  company Company @relation(fields: [companyId], references: [id])
  skill   Skill   @relation(fields: [skillId], references: [id])

  @@id([jobId, companyId, skillId])
}

model ApplicantSkill {
  applicantId Int
  skillId     Int
  itemOrder   Int

  applicant Applicant @relation(fields: [applicantId], references: [id])
  skill     Skill     @relation(fields: [skillId], references: [id])

  @@id([applicantId, skillId])
}

model JobInterest {
  applicantId  Int
  jobId        Int
  interestedAt DateTime

  applicant Applicant @relation(fields: [applicantId], references: [id])
  job       Job       @relation(fields: [jobId], references: [id])

  @@id([applicantId, jobId])
}

model JobViewLog {
  viewId      Int      @id @default(autoincrement())
  applicantId Int
  jobId       Int
  viewedAt    DateTime

  applicant Applicant @relation(fields: [applicantId], references: [id])
  job       Job       @relation(fields: [jobId], references: [id])
}

model Application {
  id          Int               @id @default(autoincrement())
  applicantId Int
  jobId       Int
  status      ApplicationStatus
  appliedAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  applicant            Applicant              @relation(fields: [applicantId], references: [id])
  job                  Job                    @relation(fields: [jobId], references: [id])
  applicationQuestion  ApplicationQuestion[]
  applicationFile      ApplicationFile[]
  jobApplicationStatus JobApplicationStatus[]
}

model ApplicationQuestion {
  questionId    Int    @id @default(autoincrement())
  applicationId Int
  questionText  String
  responseText  String

  Application Application @relation(fields: [applicationId], references: [id])
}

model ApplicationFile {
  fileId        Int      @id @default(autoincrement())
  applicationId Int
  fileType      String
  filePath      String
  uploadTime    DateTime

  Application Application @relation(fields: [applicationId], references: [id])
}

model JobFavorite {
  favoriteId  Int      @id @default(autoincrement())
  applicantId Int
  jobId       Int
  isFavorite  Boolean
  favoritedAt DateTime

  applicant Applicant @relation(fields: [applicantId], references: [id])
  job       Job       @relation(fields: [jobId], references: [id])
}

model ApplicantFavorite {
  favoriteId  Int      @id @default(autoincrement())
  companyId   Int
  applicantId Int
  isFavorite  Boolean
  favoritedAt DateTime

  company   Company   @relation(fields: [companyId], references: [id])
  applicant Applicant @relation(fields: [applicantId], references: [id])
}

model JobApplicationStatus {
  statusId        Int               @id @default(autoincrement())
  applicationId   Int
  status          ApplicationStatus
  statusChangedAt DateTime

  application Application @relation(fields: [applicationId], references: [id])
}

enum ApplicationStatus {
  submitted
  reviewing
  interview
  rejected
}

model CompanyInfo {
  id                Int       @id @default(autoincrement())
  companyId         Int       @unique
  introduction      String?
  logoUrl           String?
  companyType       String?
  numberOfEmployees Int?
  capital           Decimal?
  establishmentDate DateTime?
  mainBusiness      String?

  company Company @relation(fields: [companyId], references: [id])
}

model CompanyCertification {
  id                          Int     @id @default(autoincrement())
  companyId                   Int
  registrationNumber          String?
  registrationCertificatePath String?
  certificateVerified         Boolean @default(false)

  company Company @relation(fields: [companyId], references: [id])
}

model CompanyStatistics {
  id            Int @id @default(autoincrement())
  companyId     Int @unique
  viewCount     Int @default(0)
  interestCount Int @default(0)
  searchCount   Int @default(0)

  Company Company @relation(fields: [companyId], references: [id])
}

model ApplicantInfo {
  id              Int     @id @default(autoincrement())
  applicantId     Int     @unique
  fullName        String
  email           String
  phone           String
  gender          String
  age             Int
  address         String
  profileImageUrl String?
  isComplete      Boolean @default(false)

  applicant Applicant @relation(fields: [applicantId], references: [id])
}

model ApplicantEducation {
  id               Int      @id @default(autoincrement())
  applicantId      Int
  educationLevel   String
  schoolName       String
  major            String
  startDate        DateTime
  endDate          DateTime
  graduationStatus String
  isComplete       Boolean  @default(false)

  applicant Applicant @relation(fields: [applicantId], references: [id])
}

model ApplicantExperience {
  id              Int       @id @default(autoincrement())
  applicantId     Int
  experienceLevel Boolean   @default(false)
  companyName     String?
  position        String?
  startDate       DateTime?
  endDate         DateTime?
  description     String?
  department      String?
  duties          String?
  totalExperience Int?
  isComplete      Boolean   @default(false)

  applicant Applicant @relation(fields: [applicantId], references: [id])

  @@unique([applicantId])
}

enum QualificationType {
  Certificate
  Language
  Award
  Education
}

model ApplicantQualifications {
  id                  Int               @id @default(autoincrement())
  applicantId         Int
  qualificationType   QualificationType
  qualificationName   String?
  issuingOrganization String?
  startDate           DateTime?
  endDate             DateTime?
  score               String?
  testName            String?
  acquisitionDate     DateTime?
  isComplete          Boolean           @default(false)

  applicant Applicant @relation(fields: [applicantId], references: [id])

  @@unique([applicantId])
}

model ApplicantProject {
  id               Int       @id @default(autoincrement())
  applicantId      Int
  projectName      String?
  organizationName String?
  startDate        DateTime?
  endDate          DateTime?
  description      String?
  countryName      String?
  isComplete       Boolean   @default(false)

  applicant Applicant @relation(fields: [applicantId], references: [id])

  @@unique([applicantId])
}
