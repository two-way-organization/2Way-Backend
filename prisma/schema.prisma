// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum EducationLevel {
  HighSchoolGraduate // 고등학교졸업
  AssociateDegree // 대학졸업(2,3년)
  BachelorsDegree // 대학교졸업(4년)
  MastersOrDoctorate // 석/박사
  EducationNotRequired // 졸업학력무관
}

enum JobLocation {
  Seoul // 서울
  Gyeonggi // 경기
  Incheon // 인천
  Daejeon // 대전
  Sejong // 세종
  Chungnam // 충남
  Chungbuk // 충북
  Gwangju // 광주
  Jeonnam // 전남
  Jeonbuk // 전북
  Daegu // 대구
  Gyeongbuk // 경북
  Busan // 부산
  Ulsan // 울산
  Gyeongnam // 경남
  Gangwon // 강원
  Jeju // 제주
}

enum ExperienceLevel {
  Newcomer // 경력
  Experienced // 신입
  Unspecified // 경력 무관
}

enum JobType {
  Regular // 정규직
  Intern // 인턴
  ConversionIntern //전환형 인턴
  Contract // 계약직
}

enum JobSalary {
  DecisionAfterTheInterview // 면접 후 결정
  AccordingToCompanyPolicy // 회사내규에 따름
}

enum JobStatus {
  Ongoing // 진행 중
  Closed // 마감
}

enum CompanyType {
  SmallBusiness // 중소기업
  MediumEnterprise // 중견기업
  Enterprise // 대기업
}

enum ApplicationStatus {
  Waiting // 지원대기
  Success // 지원합격
  Failed // 지원불합격
}

enum ApplicationResult {
  Submitted // 제출
  Reviewing // 검토 중
  Interview // 인터뷰
  Rejected // 거부
}

model Applicant {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ApplicantResume과의 일대다 관계
  applicantResume ApplicantResume[]

  // Application과의 일대다 관계
  application Application[]

  // ApplicantActivity와의 일대다 관계
  ApplicantActivity ApplicantActivity[]

  // CompanyApplicantFavorite과의 일대다 관계
  CompanyApplicantFavorite CompanyApplicantFavorite[]

  @@map("Applicant")
}

model ApplicantResume {
  applicantId     Int             @unique
  gitHubId        String
  educationLevel  EducationLevel
  schoolName      String
  major           String
  gender          String
  birth           DateTime
  experienceLevel ExperienceLevel
  address         String
  totalExperience Int?
  companyName     String?
  duties          String?

  // Applicant와의 일대일 관계
  applicant Applicant @relation(fields: [applicantId], references: [id])

  @@map("ApplicantResume")
}

model Application {
  id          Int                @id @default(autoincrement())
  applicantId Int                @unique
  jobId       Int                @unique
  status      ApplicationStatus  @default(Waiting) // 진행 상태
  result      ApplicationResult? // 최종 결과 (옵션)
  appliedAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  // Applicant와의 일대다 관계
  applicant Applicant @relation(fields: [applicantId], references: [id])

  // Job와의 일대다 관계
  job Job @relation(fields: [jobId], references: [id])

  // ApplicationQuestion와의 일대다 관계
  applicationQuestion ApplicationQuestion[]

  // ApplicationFile와의 일대다 관계
  applicationFile ApplicationFile[]

  // ApplicantActivity와의 일대다 관계
  applicantActivity ApplicantActivity[]

  @@map("Application")
}

model ApplicationQuestion {
  questionId         Int    @id @default(autoincrement())
  applicationId      Int
  applicantResponse  String // 원문 답변
  summarizedResponse String // 요약된 답변

  application Application @relation(fields: [applicationId], references: [id])

  @@map("ApplicationQuestion")
}

model ApplicationFile {
  fileId        Int      @id @default(autoincrement())
  applicationId Int
  fileType      String
  filePath      String
  uploadTime    DateTime

  application Application @relation(fields: [applicationId], references: [id])

  @@map("ApplicationFile")
}

model ApplicantActivity {
  id                 Int       @id @default(autoincrement())
  applicantId        Int
  jobId              Int?
  companyId          Int?
  applicationId      Int?
  viewedAt           DateTime?
  jobFavoritedAt     DateTime?
  companyFavoritedAt DateTime?

  // Applicant와의 일대다 관계
  applicant Applicant @relation(fields: [applicantId], references: [id])

  // Job와의 일대다 관계
  job Job? @relation(fields: [jobId], references: [id])

  // Company와의 일대다 관계
  company Company? @relation(fields: [companyId], references: [id])

  // Application과의 일대다 관계
  application Application? @relation(fields: [applicationId], references: [id])

  @@map("ApplicantActivity")
}

model Company {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // CompanyInfo와의 일대일 관계
  companyInfo CompanyInfo?

  // Job과의 일대다 관계
  job Job[]

  // CompanyApplicantFavorite과의 일대다 관계
  companyApplicantFavorite CompanyApplicantFavorite[]

  // ApplicantActivity와의 일대다 관계
  applicantActivity ApplicantActivity[]

  // JobTopicDetails와의 일대다 관계
  jobTopicDetails JobTopicDetails[]

  // CompanySolution과의 다대다 관계 (중간 테이블 CompanySolution)
  companySolution CompanySolution[]

  @@map("Company")
}

model CompanyInfo {
  companyId          Int         @unique
  companyName        String
  registrationNumber String
  ceoName            String
  introduction       String?
  logoImage          String      @db.LongText
  companyType        CompanyType
  numberOfEmployees  Int
  capital            Decimal     @db.Decimal(65, 30)
  establishmentDate  DateTime
  mainBusiness       Json

  // Company와의 일대일 관계
  company Company @relation(fields: [companyId], references: [id])

  @@map("CompanyInfo")
}

model Solution {
  id           Int    @id @default(autoincrement())
  solutionName String

  // CompanySolution과의 다대다 관계 (중간 테이블 CompanySolution)
  companySolution CompanySolution[]

  @@map("Solution")
}

model CompanySolution {
  companyId  Int
  solutionId Int

  // Company 다대다 관계 (중간 테이블 CompanySolution)
  Company Company @relation(fields: [companyId], references: [id], map: "Company_CompanySolution_fkey")

  // Solution과의 다대다 관계 (중간 테이블 CompanySolution)
  solution Solution @relation(fields: [solutionId], references: [id])

  @@id([companyId, solutionId])
  @@map("CompanySolution")
}

model Job {
  id                        Int             @id @default(autoincrement())
  companyId                 Int
  title                     String
  startDate                 DateTime
  endDate                   DateTime
  numberOfVacancies         Int             @default(1)
  experienceLevel           ExperienceLevel
  educationLevel            EducationLevel
  jobType                   JobType
  salary                    JobSalary
  location                  JobLocation
  recruitmentImage          String          @db.LongText
  jobIntroduction           String?
  responsibilities          String?
  qualificationRequirements String?
  preferentialTreatment     String?
  hiringProcess             String?
  personalStatementQuestion String
  requiredDocuments         String
  status                    JobStatus       @default(Ongoing)
  viewCount                 Int             @default(0)
  applicationCount          Int             @default(0)
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt

  // 해당 테이블와의 일대다 관계
  company Company @relation(fields: [companyId], references: [id])

  // Application과의 일대다 관계
  application Application[]

  // ApplicantActivity와의 일대다 관계
  applicantActivity ApplicantActivity[]

  // JobTopicDetails와의 일대다 관계
  jobTopicDetails JobTopicDetails[]

  // JobPosition과의 일대다 관계
  jobPosition JobPosition[]

  // JobSkill과의 일대다 관계
  jobSkill JobSkill[]

  @@unique([id, companyId])
  @@map("Job")
}

model JobTopicDetails {
  jobId                     Int
  companyId                 Int
  topic                     String
  detail                    String?
  itemOrder                 Int
  responsibilities          String?
  qualificationRequirements String?

  // Company와의 일대다 관계
  company Company @relation(fields: [companyId], references: [id])

  // Applicant와의 일대다 관계
  job Job @relation(fields: [jobId, companyId], references: [id, companyId])

  @@id([jobId, companyId, topic, itemOrder])
  @@map("JobTopicDetails")
}

model CompanyApplicantFavorite {
  id          Int      @id @default(autoincrement())
  companyId   Int
  applicantId Int
  favoritedAt DateTime

  // Company와의 일대다 관계 
  company Company @relation(fields: [companyId], references: [id])

  // Applicant와의 일대다 관계
  applicant Applicant @relation(fields: [applicantId], references: [id])

  @@map("CompanyApplicantFavorite")
}

model Skill {
  id        Int    @id @default(autoincrement())
  skillName String @unique

  // JobSkill과의 일대다 관계
  JobSkill JobSkill[]

  @@map("Skill")
}

model Position {
  id           Int    @id @default(autoincrement())
  positionName String @unique

  // JobPosition과의 일대다 관계
  JobPosition JobPosition[]

  @@map("Position")
}

model JobPosition {
  jobId      Int
  positionId Int

  // Job과의 다대다 관계 (중간 테이블 JobPosition)
  job Job @relation(fields: [jobId], references: [id])

  // Position과의 다대다 관계 (중간 테이블 JobPosition)
  position Position @relation(fields: [positionId], references: [id])

  @@id([jobId, positionId])
  @@map("JobPosition")
}

model JobSkill {
  jobId   Int
  skillId Int

  // Job과의 다대다 관계 (중간 테이블 JobSkill)
  job Job @relation(fields: [jobId], references: [id])

  // Skill과의 다대다 관계 (중간 테이블 JobSkill)
  skill Skill @relation(fields: [skillId], references: [id])

  @@id([jobId, skillId])
  @@map("JobSkill")
}
